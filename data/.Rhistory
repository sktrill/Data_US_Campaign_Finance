xlim(0, quantile(diamonds$carat, 0.95)) +
#ylim(0, quantile(diamonds$price, 0.95)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = TRUE,
override.aes= list(alpha = 3, size = 2))) +
geom_point(fill = '#F79420', shape = 21,
alpha = 1/2,
size = 0.75,
position = 'jitter') +
ggtitle('Price (log10) by Carat')
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) +
geom_point(fill = '#F79420', color ='black', shape = 21,
alpha = 1/2,
size = 0.75,
position = 'jitter') +
scale_y_log10(breaks = c(350, 1000, 5000, 10000, 15000)) +
xlim(0, quantile(diamonds$carat, 0.95)) +
#ylim(0, quantile(diamonds$price, 0.95)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = TRUE,
override.aes= list(alpha = 1, size = 2))) +
ggtitle('Price (log10) by Carat')
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) +
geom_point(fill = '#F79420', shape = 21,
alpha = 1/2,
size = 0.75,
position = 'jitter') +
scale_y_log10(breaks = c(350, 1000, 5000, 10000, 15000)) +
xlim(0, quantile(diamonds$carat, 0.95)) +
#ylim(0, quantile(diamonds$price, 0.95)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = TRUE,
override.aes= list(alpha = 1, size = 2))) +
ggtitle('Price (log10) by Carat')
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) +
geom_point(fill = '#F79420', shape = 21,
alpha = 1/2,
size = 0.75,
position = 'jitter') +
scale_y_log10(breaks = c(350, 1000, 5000, 10000, 15000)) +
xlim(0, quantile(diamonds$carat, 0.95)) +
#ylim(0, quantile(diamonds$price, 0.95)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = TRUE,
override.aes= list(alpha = 2, size = 2))) +
ggtitle('Price (log10) by Carat')
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) +
geom_point(fill = '#F79420', shape = 21,
alpha = 1/2,
size = 1,
position = 'jitter') +
scale_y_log10(breaks = c(350, 1000, 5000, 10000, 15000)) +
xlim(0, quantile(diamonds$carat, 0.95)) +
#ylim(0, quantile(diamonds$price, 0.95)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = TRUE,
override.aes= list(alpha = 1, size = 2))) +
ggtitle('Price (log10) by Carat')
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) +
geom_point(fill = '#F79420', shape = 21,
alpha = 1/20,
size = 1,
position = 'jitter') +
scale_y_log10(breaks = c(350, 1000, 5000, 10000, 15000)) +
xlim(0, quantile(diamonds$carat, 0.95)) +
#ylim(0, quantile(diamonds$price, 0.95)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = TRUE,
override.aes= list(alpha = 1, size = 2))) +
ggtitle('Price (log10) by Carat')
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) +
geom_point(fill = '#F79420', shape = 21,
alpha = 1/2,
size = 2,
position = 'jitter') +
scale_y_log10(breaks = c(350, 1000, 5000, 10000, 15000)) +
xlim(0, quantile(diamonds$carat, 0.95)) +
#ylim(0, quantile(diamonds$price, 0.95)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = TRUE,
override.aes= list(alpha = 1, size = 2))) +
ggtitle('Price (log10) by Carat')
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) +
geom_point(fill = '#F79420', shape = 21,
alpha = 1/2,
size = 1,
position = 'jitter') +
scale_y_log10(breaks = c(350, 1000, 5000, 10000, 15000)) +
xlim(0, quantile(diamonds$carat, 0.95)) +
#ylim(0, quantile(diamonds$price, 0.95)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = TRUE,
override.aes= list(alpha = 1, size = 2))) +
ggtitle('Price (log10) by Carat')
m1 <- lm (I(log(price)) ~ I(carot^(1/3)), data = diamonds)
m1 <- lm (I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m1 <- lm (I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
install.packageS('memisc')
install.packageS("memisc")
install.packages("memisc")
library(memisc, warn.conflicts=FALSE, quietly=TRUE)
m1 <- lm (I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
modelEst <- predict (m5, diamonds, interval = "prediction", level = 0.95)
exp(modelEst)
df <- data.frame(carat = 1.00, cut = "V.Good",color="I",clarity="VS1")
modelEst <- predict (m5, df, interval = "prediction", level = 0.95)
diamonds
df <- data.frame(carat = 1.00, cut = "Very Good",color="I",clarity="VS1")
modelEst <- predict (m5, df, interval = "prediction", level = 0.95)
exp(modelEst)
lm (I(log(price)) ~ I(carat^(1/3)), data = diamonds)
summary(m1)
anova(m1)
plot(m1)
library(MASS, warn.conflicts=FALSE, quietly=TRUE)
library(lattice, warn.conflicts=FALSE, quietly=TRUE)
fitted(m1)
coef(m1)
residuals(m1)
usa_noaa_temp_rain_monthly
names(tags)
library(shiny)
names(tags)
tags$h1
tags$h1()
tags$h1("asd")
tags$h1(asd)
names(tags)
install.packages('htmlwidgets')
library(tidyr, warn.conflicts=FALSE, quietly=TRUE)
library(readr, warn.conflicts=FALSE, quietly=TRUE)
library(dplyr, warn.conflicts=FALSE, quietly=TRUE)
library(ggplot2, warn.conflicts=FALSE, quietly=TRUE)
library(shiny, warn.conflicts=FALSE, quietly=TRUE)
library(plotly, warn.conflicts=FALSE, quietly=TRUE)
library(htmlwidgets, warn.conflicts=FALSE, quietly=TRUE)
library(sigma, warn.conflicts=FALSE, quietly=TRUE)
install.packages('sigma')
library(tidyr, warn.conflicts=FALSE, quietly=TRUE)
library(readr, warn.conflicts=FALSE, quietly=TRUE)
library(dplyr, warn.conflicts=FALSE, quietly=TRUE)
library(ggplot2, warn.conflicts=FALSE, quietly=TRUE)
library(shiny, warn.conflicts=FALSE, quietly=TRUE)
library(plotly, warn.conflicts=FALSE, quietly=TRUE)
library(htmlwidgets, warn.conflicts=FALSE, quietly=TRUE)
library(rCharts, warn.conflicts=FALSE, quietly=TRUE)
library(devtools, warn.conflicts=FALSE, quietly=TRUE)
library(tidyr, warn.conflicts=FALSE, quietly=TRUE)
library(readr, warn.conflicts=FALSE, quietly=TRUE)
library(dplyr, warn.conflicts=FALSE, quietly=TRUE)
library(ggplot2, warn.conflicts=FALSE, quietly=TRUE)
library(scales, warn.conflicts=FALSE, quietly=TRUE)
library(shiny, warn.conflicts=FALSE, quietly=TRUE)
library(plotly, warn.conflicts=FALSE, quietly=TRUE)
library(htmlwidgets, warn.conflicts=FALSE, quietly=TRUE)
library(devtools, warn.conflicts=FALSE, quietly=TRUE)
library(streamgraph, warn.conflicts=FALSE, quietly=TRUE)
# devtools::install_github("hrbrmstr/streamgraph")
# devtools::install_github("ramnathv/rCharts")
# set api key credententials (moved to .Rprofile)
Sys.setenv("plotly_username"="thekotecha")
Sys.setenv("plotly_api_key"="I1dlrfmUJ0sP8ggv996a")
setwd("D:/Github/Data_US_Campaign_Finance/data")
# data from Vital Statistics study - https://www.brookings.edu/research/vital-statistics-on-congressdata-on-the-u-s-congress-a-joint-effort-from-brookings-and-the-american-enterprise-institute/
# government
df_house_maj <- tbl_df(read.csv("vsc2_elections_house_majority.csv", stringsAsFactors=FALSE))
df_senate_maj <- tbl_df(read.csv("vsc2_elections_senate_majority.csv", stringsAsFactors=FALSE))
df_swing_seats <- tbl_df(read.csv("supp_elections_swing_seats.csv", stringsAsFactors=FALSE))
# politics
df_costs <- tbl_df(read.csv("vsc3_campfin_costs.csv", stringsAsFactors=FALSE))
df_house_incum <- tbl_df(read.csv("vsc3_campfin_house_incumbents.csv", stringsAsFactors=FALSE))
df_house_open <- tbl_df(read.csv("vsc3_campfin_house_open.csv", stringsAsFactors=FALSE))
df_senate_incum <- tbl_df(read.csv("vsc3_campfin_senate_incumbents.csv", stringsAsFactors=FALSE))
df_senate_open <- tbl_df(read.csv("vsc3_campfin_senate_open.csv", stringsAsFactors=FALSE))
df_pac <- tbl_df(read.csv("vsc3_campfin_pac_indep.csv", stringsAsFactors=FALSE))
# media
df_polar_house <- tbl_df(read.csv("vsc8_polarization_house.csv", stringsAsFactors=FALSE))
df_polar_senate <- tbl_df(read.csv("vsc8_polarization_senate.csv", stringsAsFactors=FALSE))
df_media_trust <- tbl_df(read.csv("supp_media_trust.csv", stringsAsFactors=FALSE))
# Graphs (see story outline *.txt):
# YES:
# - 60% district for house and senate
# - graph of swing voters
# - rising cost of election
# - comparison of challenger vs incumbent cost based for house
# - comparison of challenger vs incumbent cost based for senate
# - rising pac contributions with historical supreme court cases timeline
# - rising idealogical polarization in house and senate
# - heatmap for media trust by new sources
# MAYBE / NO:
# - comparison of open seats cost for house
# - comparison of open seats cost for senate
# - (NEW PROJECT IDEA) cosine similarity / KNN analysis for pac spending vs house member voting history
# --------------------------------------------
# Wrangling & Analysis
# --------------------------------------------
# create new column to separate out starting year for senate session
df_senate_maj <- separate(df_senate_maj,"period",c("year","end.year"),sep=" - ")
# convert columns to neccessary data type
df_senate_maj$year <- as.integer(df_senate_maj$year)
df_house_maj$incumbents[df_house_maj$incumbents =="391a"] <- 391
df_house_maj$incumbents <- as.integer(df_house_maj$incumbents)
# rename columns
names(df_senate_maj)[6] <- "percentage"
# create new column to identify house vs senate district data
df_house_maj$chamber <- "house"
df_senate_maj$chamber <- "senate"
# remove unnecessary columns
df_senate_maj <- subset(df_senate_maj, select=-c(end.year,south,north))
# combine senate and house datasets for majority districts
df_majority <- full_join(df_house_maj, df_senate_maj)
# create factors
df_majority$chamber <- factor(df_majority$chamber)
# fix percentages
df_majority$percentage <- df_majority$percentage / 100
# gather row headings into column variable by type of victory in district
df_swing_seats <- gather(df_swing_seats, "type", "total", 2:4, factor_key=TRUE)
# remove unnecessary columns for nominal figures
df_costs <- subset(df_costs, select=-c(house.nominal, senate.nominal))
# rename columns
names(df_costs)[2] <- "house"
names(df_costs)[3] <- "senate"
# gather row headings into column variable for chamber
df_costs <- gather(df_costs, "chamber", "cost", 2:3, factor_key=TRUE)
df_costs$cost <- as.integer(gsub("*,*", "", df_costs$cost))
# convert cost to millions
df_costs$cost <- df_costs$cost / 1000000
# for House races
# gather all years into columns to vectorize the table
df_house_incum <- gather (df_house_incum, "year", "cost", -c(result,type1,type2))
# filter for just the rows on cost
df_house_incum <- filter(df_house_incum, grepl("Cost",type2))
df_house_incum$cost <- as.integer(gsub("*,*", "", df_house_incum$cost))
# fix year column to remove extra 'X'
df_house_incum$year <- as.integer(gsub("X*", "", df_house_incum$year))
# rename columns
names(df_house_incum)[2] <- "candidate"
# create factors
df_house_incum$result <- factor(df_house_incum$result)
df_house_incum$candidate <- factor(df_house_incum$candidate)
# filter for just cost for incumbents in house elections by total and then remove column
df_house_incum <- df_house_incum %>% filter(type2 == "Total Cost")
df_house_incum <- subset(df_house_incum, select=-c(type2))
# create separate dataframes for type of victory
df_house_incum_win60plus <- df_house_incum %>% filter(result == "Incumbent won with 60% or more")
df_house_incum_win <- df_house_incum %>% filter(result == "Incumbent won with <60%")
df_house_incum_loss <- df_house_incum %>% filter(result == "Incumbent was defeated")
df_house_incum_win60plus <- subset(df_house_incum_win60plus, select=-c(result))
df_house_incum_win <- subset(df_house_incum_win, select=-c(result))
df_house_incum_loss <- subset(df_house_incum_loss, select=-c(result))
# spread out incumbent and challengers column
df_house_incum_win60plus <- spread (df_house_incum_win60plus, candidate, cost)
df_house_incum_win <- spread (df_house_incum_win, candidate, cost)
df_house_incum_loss <- spread (df_house_incum_loss, candidate, cost)
# create new column for differential of election spending
df_house_incum_win60plus$diffw60 <- round(df_house_incum_win60plus$Incumbents / df_house_incum_win60plus$Challengers, 2)
df_house_incum_win$diffw <- round(df_house_incum_win$Incumbents / df_house_incum_win$Challengers, 2)
df_house_incum_loss$diffl <- round(df_house_incum_loss$Incumbents / df_house_incum_loss$Challengers, 2)
# create new dataset for all differentials
df_house_incumbents <- inner_join(df_house_incum_win60plus,df_house_incum_win, b = "year")
df_house_incumbents <- inner_join(df_house_incumbents,df_house_incum_loss, b = "year")
df_house_incumbents <- subset(df_house_incumbents, select = c(year, diffw60,diffw,diffl))
# for Senate races
# gather all years into columns to vectorize the table
df_senate_incum <- gather (df_senate_incum, "year", "cost", -c(result,type1,type2))
# filter for just the rows on cost
df_senate_incum <- filter(df_senate_incum, grepl("Cost",type2))
df_senate_incum$cost[is.na(df_senate_incum$cost)] <- 0
df_senate_incum$cost <- as.integer(gsub("*,*", "", df_senate_incum$cost))
df_senate_incum$cost[is.na(df_senate_incum$cost)] <- 0
# fix year column to remove extra 'X'
df_senate_incum$year <- as.integer(gsub("X*", "", df_senate_incum$year))
# rename columns
names(df_senate_incum)[2] <- "candidate"
# create factors
df_senate_incum$result <- factor(df_senate_incum$result)
df_senate_incum$candidate <- factor(df_senate_incum$candidate)
# filter for just cost for incumbents in house elections by total and then remove column
df_senate_incum <- df_senate_incum %>% filter(type2 == "Total Cost")
df_senate_incum <- subset(df_senate_incum, select=-c(type2))
# create separate dataframes for type of victory
df_senate_incum_win60plus <- df_senate_incum %>% filter(result == "Incumbent won with 60% or more")
df_senate_incum_win <- df_senate_incum %>% filter(result == "Incumbent won with <60%")
df_senate_incum_loss <- df_senate_incum %>% filter(result == "Incumbent was defeated")
df_senate_incum_win60plus <- subset(df_senate_incum_win60plus, select=-c(result))
df_senate_incum_win <- subset(df_senate_incum_win, select=-c(result))
df_senate_incum_loss <- subset(df_senate_incum_loss, select=-c(result))
# spread out incumbent and challengers column
df_senate_incum_win60plus <- spread (df_senate_incum_win60plus, candidate, cost)
df_senate_incum_win <- spread (df_senate_incum_win, candidate, cost)
df_senate_incum_loss <- spread (df_senate_incum_loss, candidate, cost)
# create new column for differential of election spending
df_senate_incum_win60plus$diffw60 <- round(df_senate_incum_win60plus$Incumbents / df_senate_incum_win60plus$Challengers, 2)
df_senate_incum_win$diffw <- round(df_senate_incum_win$Incumbents / df_senate_incum_win$Challengers, 2)
df_senate_incum_loss$diffl <- round(df_senate_incum_loss$Incumbents / df_senate_incum_loss$Challengers, 2)
# create new dataset for all differentials
df_senate_incumbents <- inner_join(df_senate_incum_win60plus,df_senate_incum_win, b = "year")
df_senate_incumbents <- inner_join(df_senate_incumbents,df_senate_incum_loss, b = "year")
df_senate_incumbents <- subset(df_senate_incumbents, select = c(year, diffw60,diffw,diffl))
# convert text to numbers
df_pac$for.dems <- as.integer(gsub("*,*", "", df_pac$for.dems))
df_pac$for.repub <- as.integer(gsub("*,*", "", df_pac$for.repub))
df_pac$against.dems <- as.integer(gsub("*,*", "", df_pac$against.dems))
df_pac$against.repub <- as.integer(gsub("*,*", "", df_pac$against.repub))
df_pac$total <- as.integer(gsub("*,*", "", df_pac$total))
# remove extra whitespace
df_pac$congress <- gsub("* *", "", df_pac$congress)
# create factors
df_pac$congress <- factor(df_pac$congress)
# convert cost figures for graphic purposes
df_pac$against.dems = df_pac$against.dems * -1
df_pac$against.repub = df_pac$against.repub * -1
# remove extra columns
df_pac <- subset(df_pac, select=-total)
# create separate data frames for house and senate data
df_pac_house <- df_pac %>% filter(congress == "House")
df_pac_senate <- df_pac %>% filter(congress == "Senate")
# # rename columns for House
# names(df_pac_house)[3] <- "house.for.dems"
# names(df_pac_house)[4] <- "house.against.dems"
# names(df_pac_house)[5] <- "house.for.rep"
# names(df_pac_house)[6] <- "house.against.rep"
#
# # rename columns for Senate
# names(df_pac_senate)[3] <- "sen.for.dems"
# names(df_pac_senate)[4] <- "sen.against.dems"
# names(df_pac_senate)[5] <- "sen.for.rep"
# names(df_pac_senate)[6] <- "sen.against.rep"
#
# # create new dataframes for democrats and republicans
# df_pac_comb <- full_join(df_pac_senate, df_pac_house, by = 'year')
# df_pac_dems <- subset(df_pac_comb, select = c(year, sen.for.dems, sen.against.dems, house.for.dems, house.against.dems))
# df_pac_rep <- subset(df_pac_comb, select = c(year, sen.for.rep, sen.against.rep, house.for.rep, house.against.rep))
# remove unnecessary columns
df_polar_house <- subset(df_polar_house, select = -c(Nonsouthern.Democrats, Southern.Democrats))
df_polar_senate <- subset(df_polar_senate, select = -c(Nonsouthern.Democrats, Southern.Democrats))
# gather columns
df_polar_house <- gather(df_polar_house, "type", "total", 3:5, factor_key=TRUE)
df_polar_senate <- gather(df_polar_senate, "type", "total", 3:5, factor_key=TRUE)
# remove unnecessary columns
df_media_trust <- subset(df_media_trust, select = -Overall)
# rename columns for ease of use
names(df_media_trust)[2] <- "cons.lib"
names(df_media_trust)[3] <- "most.lib"
names(df_media_trust)[4] <- "mixed"
names(df_media_trust)[5] <- "most.con"
names(df_media_trust)[6] <- "cons.con"
# convert to integer
df_media_trust$cons.lib <- as.integer(gsub("%", "", df_media_trust$cons.lib))
df_media_trust$most.lib <- as.integer(gsub("%", "", df_media_trust$most.lib))
df_media_trust$mixed <- as.integer(gsub("%", "", df_media_trust$mixed))
df_media_trust$most.con <- as.integer(gsub("%", "", df_media_trust$most.con))
df_media_trust$cons.con <- as.integer(gsub("%", "", df_media_trust$cons.con))
# calculate total percentage of respondents that have a trust / distrust opinion
df_media_trust$total <- rowSums(df_media_trust[2:6])
# calculate percentages
df_media_trust$cons.lib <- round(df_media_trust$cons.lib / df_media_trust$total, 2)
df_media_trust$most.lib <- round(df_media_trust$most.lib / df_media_trust$total, 2)
df_media_trust$mixed <- round(df_media_trust$mixed / df_media_trust$total, 2)
df_media_trust$most.con <- round(df_media_trust$most.con / df_media_trust$total, 2)
df_media_trust$cons.con <- round(df_media_trust$cons.con / df_media_trust$total, 2)
# update total column
df_media_trust$total <- rowSums(df_media_trust[2:6])
# fix differential due to rounding error
df_media_trust$diff <- 1 - df_media_trust$total
df_media_trust$mixed <- df_media_trust$mixed + df_media_trust$diff
df_media_trust$total <- rowSums(df_media_trust[2:6])
# set variable to order bar graph by
df_media_trust$order <- rowSums(df_media_trust[2:4])
# remove unnecessary columns
df_media_trust <- subset(df_media_trust, select = -c(total, diff))
# rename columns for legend purposes
names(df_media_trust)[2] <- "Consistently Liberal"
names(df_media_trust)[3] <- "Mostly Liberal"
names(df_media_trust)[4] <- "Mixed"
names(df_media_trust)[5] <- "Mostly Conservative"
names(df_media_trust)[6] <- "Consistently Conservative"
# gather columns
df_media_trust <- gather(df_media_trust, "type", "total", 2:6, factor_key=TRUE)
# to remove zero labels during graphing bar graph
df_media_trust$total[df_media_trust$total == 0] <- NA
# --------------------------------------------
# Graphing
# --------------------------------------------
# Styling
# theme constants for graphing
HOUSE_C1 <- "#32b200" # green
SENATE_C1 <- "#a100ff" # purple
HOUSE_C2 <- "#56ff3f" # light green
SENATE_C2 <- "#d284ff" # light purple
HOUSE_C3 <- "#0b6000" # dark green
SENATE_C3 <- "#5a008e" # dark purple
DEMS_C1 <- 'rgba(0, 107, 201, 0.75)' # dark blue
REPS_C1 <- 'rgba(244, 0, 0, 0.75)' # dark red
DEMS_C2 <- 'rgba(201, 229, 255, 0.75)' # light blue
REPS_C2 <- 'rgba(255, 201, 201, 0.75)' # light red
DEMS_C3 <- "#54aaf9" # blue
REPS_C3 <- "#ff5b5b" # red
# set axis styling
f1 <- list(
family = "serif",
color = "black",
size = 10
)
ax <- list(
title = "",
titlefont = f1,
showticklabels = TRUE,
tickfont = f1,
showgrid = FALSE
)
ay <- list(
title = "$ in millions",
titlefont = f1,
showticklabels = TRUE,
tickfont = f1,
showgrid = FALSE
)
ay2 <- list(
title = "",
titlefont = f1,
showticklabels = TRUE,
tickfont = f1,
showgrid = FALSE
)
# set title annotations for subplots
title1 <- list(
x = 0.5,
y = 1,
text = "Incumbents win with >=60%",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "top",
font = list(color = 'black', size = 12, family = 'serif'),
showarrow = FALSE
)
title2 <- list(
x = 0.5,
y = 1,
text = "Incumbents win with <60%",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "top",
font = list(color = 'black', size = 12, family = 'serif'),
showarrow = FALSE
)
title3 <- list(
x = 0.5,
y = 1,
text = "Incumbents lose",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "top",
font = list(color = 'black', size = 12, family = 'serif'),
showarrow = FALSE
)
title4 <- list(
x = 0.5,
y = 1,
text = "House",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "top",
font = list(color = 'black', size = 12, family = 'serif'),
showarrow = FALSE
)
title5 <- list(
x = 0.5,
y = 1,
text = "Senate",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "top",
font = list(color = 'black', size = 12, family = 'serif'),
showarrow = FALSE
)
p <- ggplot(data = df_majority, aes(x = year, y = percentage, colour = chamber)) +
geom_point(size = 2, stroke = 1, shape = 21) +
geom_smooth(method = 'lm', span = 5, se = FALSE) +
theme_bw(base_family="serif") +
theme (
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_line(colour = "black"),
legend.position = "none"
) +
scale_x_continuous (limits = c(1940, 2012), breaks = seq(1940,2012,10)) +
scale_y_continuous (labels = percent, limits = c(0.2, 1), breaks = seq(0.2,1,.2)) +
labs (x=NULL, y=NULL) +
scale_colour_manual(values = c(HOUSE_C1,SENATE_C1)) +
annotate("text", x = 1995, y = 0.85, label = "House", colour = HOUSE_C1, size = 4, fontface = 'bold') +
annotate("text", x = 1965, y = 0.35, label = "Senate", colour = SENATE_C1, size = 4, fontface = 'bold')
ggplotly(p)
link <- plotly_POST(p, filename = "g1")
